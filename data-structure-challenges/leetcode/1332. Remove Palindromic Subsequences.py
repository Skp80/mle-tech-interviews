"""
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
A string is called palindrome if is one that reads the same backward as well as forward.

Example 1:
Input: s = "ababa"
Output: 1
Explanation: String is already palindrome

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

Example 4:
Input: s = ""
Output: 0

Constraints:
    0 <= s.length <= 1000
    s only consists of letters 'a' and 'b'
"""

from typing import List
import unittest


class TestSum(unittest.TestCase):
    def test_solution_1(self):
        """
        Test solution below
        """
        s = "ababa"
        expected_output = 1
        sol = Solution().removePalindromeSub(s)
        self.assertEquals(sol, expected_output)

    def test_solution_2(self):
        """
        Test solution below
        """
        s = "baabb"
        expected_output = 2
        sol = Solution().removePalindromeSub(s)
        self.assertEquals(sol, expected_output)

    def test_solution_3(self):
        """
        Test solution below
        """
        s = ""
        expected_output = 0
        sol = Solution().removePalindromeSub(s)
        self.assertEquals(sol, expected_output)


class Solution:
    sol = 0

    def removePalindromeSub(self, s: str) -> int:
        if not s:
            return 0
        if self.isPalindrome(s):
            return 1
        return 2

    @staticmethod
    def isPalindrome(s1: str) -> bool:
        return s1 == s1[::-1]


unittest.main()
